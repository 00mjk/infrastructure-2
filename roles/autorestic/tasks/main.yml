# variables
- name: Load host specific variables
  include_vars:
    file: '{{ inventory_hostname }}/main.yml'
    name: '{{ inventory_hostname }}'

# directories
- name: Ensure directories exist
  file:
    path: '{{ paths.root }}/{{ item }}'
    state: directory
  loop:
    - '{{ role_name }}'

# dependencies
- name: Ensure apt dependencies are available
  become: yes
  apt:
    name:
      - coreutils
      - python3-pip
    state: present
    update_cache: yes
- name: Ensure python dependencies are available
  become: yes
  pip:
    name: docker

# configuration
- name: Check if configuration file already exists
  stat:
    path: '{{ paths.root }}/{{ role_name }}/config.yml'
  register: existing_config_file_check

- name: Load existing keys, if any
  when: existing_config_file_check.stat.exists
  slurp:
    src: '{{ paths.root }}/{{ role_name }}/config.yml'
  register: existing_config_file

- name: Decode existing keys
  when: existing_config_file_check.stat.exists
  set_fact:
    existing: "{{ existing_config_file['content'] | b64decode | from_yaml }}"

- name: Initializing empty keys
  when: not existing_config_file_check.stat.exists
  set_fact:
    existing:
      backends: []

- name: Create configuration file
  template:
    src: '{{ role_name }}/config.yml.j2'
    dest: '{{ paths.root }}/{{ role_name }}/config.yml'
    mode: 0600
  notify: Check Autorestic Config

# container
- name: Pull autorestic container
  docker_image:
    name: '{{ image }}'
    source: pull

# wrapper script
- name: Create wrapper script
  template:
    src: '{{ role_name }}/autorestic.sh.j2'
    dest: '{{ paths.root }}/{{ role_name }}/autorestic.sh'
    mode: a+x

- name: Make wrapper script globally available
  file:
    src: '{{ paths.root }}/{{ role_name }}/autorestic.sh'
    dest: '{{ script }}'
    state: link
  become: yes

# cronjob
- name: Setup cron job
  cron:
    name: autorestic
    job: '{{ script }} backup --all; {{ script }} forget --all'
    state: present
    minute: '0'
    hour: '4'
    disabled: yes
