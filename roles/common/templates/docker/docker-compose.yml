version: '3.7'
services:
  # maintenance
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: always
    environment:
      TZ: '{{ timezone }}'
      WATCHTOWER_SCHEDULE: '0 0 0 * * *'
      WATCHTOWER_CLEANUP: 'true'
      WATCHTOWER_NOTIFICATIONS: slack
      WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: '{{ watchtower_slack_hook_url }}'
      WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER: watchtower
      WATCHTOWER_NOTIFICATION_SLACK_CHANNEL: '#hosting'
      WATCHTOWER_DEBUG: '{{ watchtower_debug | default(false) }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: always
    expose:
      - 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.dozzle.rule=Host(`dozzle.{{ domain }}`)
      - traefik.http.routers.dozzle.entrypoints=https
      - traefik.http.routers.dozzle.tls=true
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    expose:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.{{ domain }}`)
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.services.portainer-network.loadbalancer.server.port=9000

  # proxy
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    healthcheck:
      test: traefik healthcheck
      interval: 30s
      timeout: 3s
      retries: 30
    ports:
      - '80:80'
      - '443:443'
    expose:
      - 9000
    environment:
      TZ: '{{ timezone }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ root_path }}/traefik.yml:/etc/traefik/traefik.yml'
      - '{{ root_path }}/traefik:/etc/traefik'
    networks:
      proxy:
        ipv4_address: 172.20.1.2
    extra_hosts:
      - 'dockerhost:172.20.1.1'
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`traefik.{{ domain }}`)
      - traefik.http.routers.api.entrypoints=https
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.middlewares=auth@file
  authelia:
    image: authelia/authelia
    container_name: authelia
    restart: unless-stopped
    expose:
      - 9091
    environment:
      TZ: '{{ timezone }}'
      PUID: 1000
      PGID: 1000
    volumes:
      - '{{ root_path }}/authelia:/config'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.authelia.rule=Host(`auth.{{ domain }}`)
      - traefik.http.routers.authelia.entrypoints=https
      - traefik.http.routers.authelia.tls=true

  # monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    expose:
      - 9090
    environment:
      TZ: '{{ timezone }}'
    volumes:
      - prometheus:/prometheus
      - '{{ root_path }}/prometheus:/etc/prometheus'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090/'
    networks:
      - proxy
      - monitoring
    extra_hosts:
      - 'dockerhost:172.20.1.1'
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.{{ domain }}`)
      - traefik.http.routers.prometheus.entrypoints=https
      - traefik.http.routers.prometheus.tls=true
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    depends_on:
      - prometheus
    expose:
      - 9093
    volumes:
      - alertmanager:/alertmanager
      - '{{ root_path }}/alertmanager:/etc/alertmanager'
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    expose:
      - 3000
    environment:
      TZ: '{{ timezone }}'
      GF_SECURITY_ADMIN_USER: '{{ grafana_user }}'
      GF_SECURITY_ADMIN_PASSWORD: '{{ grafana_password }}'
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana:/var/lib/grafana
      - '{{ root_path }}/grafana/grafana.ini:/etc/grafana/grafana.ini'
      - '{{ root_path }}/grafana/provisioning:/etc/grafana/provisioning'
    networks:
      - proxy
      - monitoring
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.{{ domain }}`)
      - traefik.http.routers.grafana.entrypoints=https
      - traefik.http.routers.grafana.tls=true
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    expose:
      - 9100
    volumes:
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
  cadvisor:
    image: budry/cadvisor-arm:latest
    container_name: cadvisor
    restart: unless-stopped
    expose:
      - 8080
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/run:/var/run:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '--docker_only=true'
    networks:
      - monitoring
  unifi-exporter:
    image: golift/unifi-poller:latest
    container_name: unifi-exporter
    restart: unless-stopped
    depends_on:
      - unifi
    expose:
      - 9130
    volumes:
      - '{{ root_path }}/unifi-exporter/unifi-poller.conf:/config/unifi-poller.conf'
    networks:
      - monitoring
  pihole-exporter:
    image: ekofr/pihole-exporter:0.0.10
    container_name: pihole-exporter
    restart: unless-stopped
    depends_on:
      - pihole
    expose:
      - 9617
    environment:
      PIHOLE_HOSTNAME: pihole
      PIHOLE_PASSWORD: '{{ pi_hole_password }}'
    networks:
      - monitoring
  fritzbox-exporter:
    image: sealife/fritzbox-exporter:latest
    container_name: fritzbox-exporter
    restart: unless-stopped
    expose:
      - 8765
    environment:
      FRITZ_HOST: '{{ router_ip }}'
      FRITZ_USER: '{{ fritzbox_user }}'
      FRITZ_PASS: '{{ fritzbox_password }}'
    networks:
      - monitoring
  speedtest-exporter:
    image: shrunbr/speedtest-exporter-arm:latest
    container_name: speedtest-exporter
    restart: unless-stopped
    expose:
      - 9112
    networks:
      - monitoring

  # services
  homer:
    image: b4bz/homer:latest
    container_name: homer
    restart: always
    expose:
      - 8080
    environment:
      TZ: '{{ timezone }}'
      UID: 1000
      GID: 1000
    volumes:
      - '{{ root_path }}/homer/assets:/www/assets'
      - '{{ root_path }}/homer/config.yml:/www/assets/config.yml'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.homer.rule=Host(`{{ domain }}`)
      - traefik.http.routers.homer.entrypoints=https
      - traefik.http.routers.homer.tls=true
  unifi:
    image: ryansch/unifi-rpi:latest
    container_name: unifi
    restart: unless-stopped
    depends_on:
      - pihole
    ports:
      - '3478:3478/udp'
      - '8080:8080'
      - '8880:8880'
      - '8843:8843'
      - '6789:6789'
      - '10001:10001/udp'
    expose:
      - 8443
    volumes:
      - '{{ root_path }}/unifi/config:/var/lib/unifi'
      - '{{ root_path }}/unifi/log:/usr/lib/unifi/logs'
      - '{{ root_path }}/unifi/log2:/var/log/unifi'
      - '{{ root_path }}/unifi/run:/usr/lib/unifi/run'
      - '{{ root_path }}/unifi/run2:/run/unifi'
      - '{{ root_path }}/unifi/work:/usr/lib/unifi/work'
    networks:
      - proxy
      - monitoring
    labels:
      - traefik.enable=true
      - traefik.http.routers.unifi.rule=Host(`unifi.{{ domain }}`)
      - traefik.http.routers.unifi.entrypoints=https
      - traefik.http.routers.unifi.tls=true
      - traefik.http.services.unifi-network.loadbalancer.server.scheme=https
      - traefik.http.services.unifi-network.loadbalancer.server.port=8443
      - traefik.http.middlewares.unifi.headers.sslredirect=true
      - traefik.http.middlewares.unifi.headers.stsSeconds=315360000
      - traefik.http.middlewares.unifi.headers.browserXSSFilter=true
      - traefik.http.middlewares.unifi.headers.contentTypeNosniff=true
      - traefik.http.middlewares.unifi.headers.forceSTSHeader=true
      - traefik.http.middlewares.unifi.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.unifi.headers.STSPreload=true
      - traefik.http.middlewares.unifi.headers.frameDeny=true
      - traefik.http.middlewares.unifi.headers.accessControlAllowCredentials=true
      - traefik.http.middlewares.unifi.headers.SSLHost=unifi.{{ domain }}
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: unless-stopped
    depends_on:
      - cloudflared
    ports:
      - '53:53'
      - '53:53/udp'
    expose:
      - 80
    environment:
      ServerIP: '{{ controller_ip }}'
      TZ: '{{ timezone }}'
      VIRTUAL_PORT: 80
      PIHOLE_DNS_: 172.20.3.2#5053
      DNS_FQDN_REQUIRED: 'true'
      WEBPASSWORD: '{{ pi_hole_password }}'
      REV_SERVER: 'true'
      REV_SERVER_CIDR: '{{ network }}'
      REV_SERVER_TARGET: '{{ router_ip }}'
      REV_SERVER_DOMAIN: fritz.box
      PROXY_LOCATION: pihole
      SKIPGRAVITYONBOOT: 'true'
      WEBUIBOXEDLAYOUT: traditional
      TEMPERATUREUNIT: c
    volumes:
      - '{{ root_path }}/pihole/etc-pihole/:/etc/pihole/'
      - '{{ root_path }}/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/'
    networks:
      - proxy
      - monitoring
      - dns
    dns:
      - 127.0.0.1
      - 1.1.1.1
    cap_add:
      - NET_ADMIN
    labels:
      - traefik.enable=true
      - traefik.http.routers.pihole.rule=Host(`pihole.{{ domain }}`)
      - traefik.http.routers.pihole.entrypoints=https
      - traefik.http.routers.pihole.middlewares=pihole-addprefix
      - traefik.http.routers.pihole.tls=true
      - traefik.http.services.pihole-network.loadbalancer.server.port=80
      - traefik.http.middlewares.pihole-addprefix.addprefix.prefix=/admin
  cloudflared:
    image: crazymax/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    ports:
      - '5053:5053/udp'
    expose:
      - 49312
    environment:
      TZ: '{{ timezone }}'
      TUNNEL_DNS_UPSTREAM: https://1.1.1.1/dns-query,https://1.0.0.1/dns-query
    networks:
      monitoring: {}
      dns:
        ipv4_address: 172.20.3.2
  homeassistant:
    image: homeassistant/home-assistant:stable
    container_name: homeassistant
    restart: unless-stopped
    network_mode: host
    environment:
      TZ: '{{ timezone }}'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - '{{ root_path }}/home-assistant:/config'
    dns:
      - 127.0.0.1
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
networks:
  proxy:
    ipam:
      config:
        - subnet: 172.20.1.0/24
          gateway: 172.20.1.1
  monitoring:
    ipam:
      config:
        - subnet: 172.20.2.0/24
          gateway: 172.20.2.1
  dns:
    ipam:
      config:
        - subnet: 172.20.3.0/24
          gateway: 172.20.3.1
volumes:
  prometheus:
  alertmanager:
  grafana:
  portainer:
