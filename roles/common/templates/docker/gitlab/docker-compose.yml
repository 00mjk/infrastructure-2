version: '3.7'
services:
  # maintenance
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: always
    environment:
      TZ: '{{ timezone }}'
      WATCHTOWER_SCHEDULE: '{{ watchtower_schedule | default("0 0 0 * * *") }}'
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATIONS_LEVEL: '{{ watchtower_slack_level }}'
      WATCHTOWER_NOTIFICATION_URL: '{{ watchtower_slack_url }}'
      WATCHTOWER_NOTIFICATION_TEMPLATE: '{{ watchtower_slack_template }}'
      WATCHTOWER_CLEANUP: '{{ watchtower_debug | default(true) }}'
      WATCHTOWER_DEBUG: '{{ watchtower_debug | default(false) }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: always
    expose:
      - 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.dozzle.rule=Host(`logs.{{ domain }}`)
      - traefik.http.routers.dozzle.entrypoints=https
      - traefik.http.routers.dozzle.tls=true
      - traefik.http.routers.dozzle.tls.certresolver=http
      - traefik.http.routers.dozzle.middlewares=auth@file
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    expose:
      - 9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.{{ domain }}`)
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=http
      - traefik.http.routers.portainer.middlewares=auth@file
      - traefik.http.services.portainer-gitlab.loadbalancer.server.port=9000
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    restart: unless-stopped
    environment:
      TZ: '{{ timezone }}'
      GLANCES_OPT: '-w'
    expose:
      - 61208
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - '{{ root_path }}/glances/glances.conf:/glances/conf/glances.conf'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.glances.rule=Host(`stats.{{ domain }}`)
      - traefik.http.routers.glances.entrypoints=https
      - traefik.http.routers.glances.tls=true
      - traefik.http.routers.glances.tls.certresolver=http
      - traefik.http.routers.glances.middlewares=auth@file
      - traefik.http.services.glances-gitlab.loadbalancer.server.port=61208

  # proxy
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    healthcheck:
      test: traefik healthcheck
      interval: 30s
      timeout: 3s
      retries: 30
    ports:
      - '80:80'
      - '443:443'
    environment:
      TZ: '{{ timezone }}'
      DO_AUTH_TOKEN: '{{ digital_ocean_token }}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ root_path }}/traefik.yml:/etc/traefik/traefik.yml'
      - '{{ root_path }}/traefik:/etc/traefik'
    networks:
      proxy:
        ipv4_address: 172.20.1.2
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`traefik.{{ domain }}`)
      - traefik.http.routers.api.entrypoints=https
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=http
      - traefik.http.routers.api.middlewares=auth@file
  authelia:
    image: authelia/authelia
    container_name: authelia
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9091 || exit 1
      interval: 30s
      timeout: 3s
      retries: 30
    expose:
      - 9091
    environment:
      TZ: '{{ timezone }}'
      PUID: 1000
      PGID: 1000
    volumes:
      - '{{ root_path }}/authelia:/config'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.authelia.rule=Host(`auth.{{ domain }}`)
      - traefik.http.routers.authelia.entrypoints=https
      - traefik.http.routers.authelia.tls=true
      - traefik.http.routers.authelia.tls.certresolver=http

  # services
  homer:
    image: b4bz/homer:latest
    container_name: homer
    restart: always
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1
      interval: 30s
      timeout: 3s
      retries: 30
    expose:
      - 8080
    environment:
      TZ: '{{ timezone }}'
      UID: 1000
      GID: 1000
    volumes:
      - '{{ root_path }}/homer/assets:/www/assets'
      - '{{ root_path }}/homer/config.yml:/www/assets/config.yml'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.homer.rule=Host(`go.{{ domain }}`)
      - traefik.http.routers.homer.entrypoints=https
      - traefik.http.routers.homer.tls=true
      - traefik.http.routers.homer.tls.certresolver=http
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    restart: unless-stopped
    hostname: git.{{ domain }}
    environment:
      TZ: '{{ timezone }}'
    ports:
      - '2222:22'
    volumes:
      - '{{ root_path }}/gitlab/config:/etc/gitlab'
      - '{{ root_path }}/gitlab/data:/var/opt/gitlab'
      - '{{ root_path }}/gitlab/backups:/var/opt/gitlab-backups'
      - '{{ root_path }}/gitlab/logs:/var/log/gitlab'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitlab.rule=Host(`git.{{ domain }}`)
      - traefik.http.routers.gitlab.entrypoints=https
      - traefik.http.routers.gitlab.service=gitlab-gitlab
      - traefik.http.routers.gitlab.tls=true
      - traefik.http.routers.gitlab.tls.certresolver=http
      - traefik.http.services.gitlab-gitlab.loadbalancer.server.port=80
      - traefik.http.routers.registry.rule=Host(`registry.{{ domain }}`)
      - traefik.http.routers.registry.entrypoints=https
      - traefik.http.routers.registry.service=gitlab-registry
      - traefik.http.routers.registry.tls=true
      - traefik.http.routers.registry.tls.certresolver=http
      - traefik.http.services.gitlab-registry.loadbalancer.server.port=80
  gitlab-runner:
    image: gitlab/gitlab-runner:alpine
    container_name: gitlab-runner
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - '{{ root_path }}/gitlab-runner:/etc/gitlab-runner'
  code-server:
    image: codercom/code-server
    container_name: code-server
    restart: unless-stopped
    user: '${HOST_UID}:${HOST_GID}'
    working_dir: /home/coder/projects
    environment:
      TZ: '{{ timezone }}'
      XDG_DATA_HOME: /home/coder
      PROXY_DOMAIN: 'code.{{ domain }}'
    volumes:
      - '{{ root_path }}/code-server/data:/home/coder/code-server'
      - '{{ root_path }}/code-server/config.yml:/home/coder/.config/code-server/config.yaml'
      - '{{ root_path }}/projects:/home/coder/projects'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.code-server.rule=Host(`code.{{ domain }}`)
      - traefik.http.routers.code-server.entrypoints=https
      - traefik.http.routers.code-server.tls=true
      - traefik.http.routers.code-server.tls.certresolver=http
      - traefik.http.routers.code-server.middlewares=auth@file
  linkding:
    image: sissbruecker/linkding:latest
    container_name: linkding
    restart: unless-stopped
    environment:
      TZ: '{{ timezone }}'
    volumes:
      - '{{ root_path }}/linkding:/etc/linkding/data'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.linkding.rule=Host(`links.{{ domain }}`)
      - traefik.http.routers.linkding.entrypoints=https
      - traefik.http.routers.linkding.tls=true
      - traefik.http.routers.linkding.tls.certresolver=http
      - traefik.http.routers.linkding.middlewares=auth@file
      - traefik.http.services.linkding-gitlab.loadbalancer.server.port=9090
networks:
  proxy:
    ipam:
      config:
        - subnet: 172.20.1.0/24
          gateway: 172.20.1.1
volumes:
  portainer:
