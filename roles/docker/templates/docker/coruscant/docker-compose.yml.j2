version: '3.7'
services:
  # maintenance
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: always
    depends_on:
      - traefik
    expose:
      - 8080
    environment:
      DOCKER_HOST: tcp://docker-proxy:2375
    networks:
      - proxy
      - docker
    labels:
      - traefik.enable=true
      - traefik.http.routers.dozzle.rule=Host(`dozzle.{{ domain }}`)
      - traefik.http.routers.dozzle.entrypoints=https
      - traefik.http.routers.dozzle.tls=true
      - traefik.http.routers.dozzle.tls.certresolver=digitalocean
      - traefik.http.routers.dozzle.middlewares=auth@file,security@file,error-pages@file

  # security
  docker-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: docker-proxy
    restart: always
    expose:
      - 2375
    environment:
      INFO: 1
      CONTAINERS: 1
      IMAGES: 1
      NETWORKS: 1
      VOLUMES: 1
      SERVICES: 1
      POST: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - docker
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: always
    network_mode: host
    environment:
      TZ: '{{ timezone }}'
      F2B_LOG_TARGET: STDOUT
      F2B_LOG_LEVEL: INFO
      F2B_DB_PURGE_AGE: 1d
      SSMTP_HOST: '{{ vault.smtp.host }}'
      SSMTP_PORT: '{{ vault.smtp.port }}'
      # SSMTP_HOSTNAME: example.com
      SSMTP_USER: '{{ vault.smtp.accounts.auth.email }}'
      SSMTP_PASSWORD: '{{ vault.smtp.accounts.auth.password }}'
      SSMTP_TLS: 'YES'
    volumes:
      - /var/log:/var/log:ro
      - '{{ root_path }}/fail2ban:/data'
    cap_add:
      - NET_ADMIN
      - NET_RAW

  # monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1
      interval: 30s
      timeout: 3s
      retries: 30
    depends_on:
      - traefik
    expose:
      - 9090
    environment:
      TZ: '{{ timezone }}'
    volumes:
      - prometheus:/prometheus
      - '{{ root_path }}/prometheus:/etc/prometheus'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=2w'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://prometheus.{{ domain }}'
    networks:
      - proxy
      - monitoring
    extra_hosts:
      - 'dockerhost:172.20.1.1'
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.{{ domain }}`)
      - traefik.http.routers.prometheus.entrypoints=https
      - traefik.http.routers.prometheus.tls=true
      - traefik.http.routers.prometheus.tls.certresolver=digitalocean
      - traefik.http.routers.prometheus.middlewares=auth@file,security@file,error-pages@file
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1
      interval: 30s
      timeout: 3s
      retries: 30
    depends_on:
      - traefik
      - prometheus
    expose:
      - 9093
    volumes:
      - alertmanager:/alertmanager
      - '{{ root_path }}/alertmanager:/etc/alertmanager'
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.{{ domain }}'
    networks:
      - proxy
      - monitoring
    labels:
      - traefik.enable=true
      - traefik.http.routers.alertmanager.rule=Host(`alerts.{{ domain }}`)
      - traefik.http.routers.alertmanager.entrypoints=https
      - traefik.http.routers.alertmanager.tls=true
      - traefik.http.routers.alertmanager.tls.certresolver=digitalocean
      - traefik.http.routers.alertmanager.middlewares=auth@file,security@file,error-pages@file
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1
      interval: 30s
      timeout: 3s
      retries: 30
    depends_on:
      - traefik
      - prometheus
    expose:
      - 3000
    environment:
      TZ: '{{ timezone }}'
      GF_SECURITY_ADMIN_USER: '{{ vault.grafana.username }}'
      GF_SECURITY_ADMIN_PASSWORD: '{{ vault.grafana.password }}'
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana:/var/lib/grafana
      - '{{ root_path }}/grafana/grafana.ini:/etc/grafana/grafana.ini'
      - '{{ root_path }}/grafana/provisioning:/etc/grafana/provisioning'
    networks:
      - proxy
      - monitoring
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.{{ domain }}`)
      - traefik.http.routers.grafana.entrypoints=https
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=digitalocean
      - traefik.http.routers.grafana.middlewares=auth@file,security@file,error-pages@file
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    depends_on:
      - traefik
    expose:
      - 3100
    volumes:
      - loki:/loki
      - '{{ root_path }}/loki/config.yml:/etc/loki/config.yml'
    command:
      - '-config.file=/etc/loki/config.yml'
      - '-config.expand-env=true'
    networks:
      - proxy
      - monitoring
    labels:
      - traefik.enable=true
      - traefik.http.routers.loki.rule=Host(`loki.{{ domain }}`)
      - traefik.http.routers.loki.entrypoints=https
      - traefik.http.routers.loki.tls=true
      - traefik.http.routers.loki.tls.certresolver=digitalocean
      - traefik.http.routers.loki.middlewares=auth@file,security@file,error-pages@file
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    depends_on:
      - loki
    volumes:
      - /var/log:/var/log:ro
      - '{{ root_path }}/promtail/config.yml:/etc/promtail/config.yml'
    command:
      - '-config.file=/etc/promtail/config.yml'
    networks:
      - monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.nvme'
  cadvisor:
    image: budry/cadvisor-arm:latest
    container_name: cadvisor
    restart: unless-stopped
    expose:
      - 8080
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/run:/var/run:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '--docker_only=true'
      - '--allow_dynamic_housekeeping=false'
      - '--housekeeping_interval=10s'
    networks:
      - monitoring
  unifi-exporter:
    image: golift/unifi-poller:latest
    container_name: unifi-exporter
    restart: unless-stopped
    depends_on:
      - unifi
    expose:
      - 9130
    volumes:
      - '{{ root_path }}/unifi-exporter/unifi-poller.conf:/config/unifi-poller.conf'
    networks:
      - monitoring
  pihole-exporter:
    image: ekofr/pihole-exporter:0.0.10
    container_name: pihole-exporter
    restart: unless-stopped
    depends_on:
      - pihole
    expose:
      - 9617
    environment:
      PIHOLE_HOSTNAME: pihole
      PIHOLE_PASSWORD: '{{ vault.pi_hole.password }}'
    networks:
      - monitoring
  fritzbox-exporter:
    image: sealife/fritzbox-exporter:latest
    container_name: fritzbox-exporter
    restart: unless-stopped
    expose:
      - 8765
    environment:
      FRITZ_HOST: '{{ vault.ips.router }}'
      FRITZ_USER: '{{ vault.fritzbox.username }}'
      FRITZ_PASS: '{{ vault.fritzbox.password }}'
    networks:
      - monitoring
  speedtest-exporter:
    image: shrunbr/speedtest-exporter-arm:latest
    container_name: speedtest-exporter
    restart: unless-stopped
    expose:
      - 9112
    networks:
      - monitoring
networks:
  proxy:
    ipam:
      config:
        - subnet: 172.20.1.0/24
          gateway: 172.20.1.1
  monitoring:
    ipam:
      config:
        - subnet: 172.20.2.0/24
          gateway: 172.20.2.1
  dns:
    ipam:
      config:
        - subnet: 172.20.3.0/24
          gateway: 172.20.3.1
  docker:
    ipam:
      config:
        - subnet: 172.20.4.0/24
          gateway: 172.20.4.1
volumes:
  prometheus:
  alertmanager:
  grafana:
  loki:
