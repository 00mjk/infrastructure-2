version: '3.7'
services:
  # maintenance
  glances:
    image: nicolargo/glances:alpine-latest
    container_name: glances
    restart: unless-stopped
    environment:
      TZ: '{{ timezone }}'
      DOCKER_HOST: tcp://docker-proxy:2375
      GLANCES_OPT: '-w'
    expose:
      - 61208
    volumes:
      - /:/rootfs:ro
      - '{{ paths.root }}/glances/glances.conf:/glances/conf/glances.conf'
    networks:
      - proxy
      - docker
    labels:
      - traefik.enable=true
      - traefik.http.routers.glances.rule=Host(`stats.{{ domain }}`)
      - traefik.http.routers.glances.entrypoints=https
      - traefik.http.routers.glances.tls=true
      - traefik.http.routers.glances.tls.certresolver=http
      - traefik.http.routers.glances.middlewares=auth-basic@file,security@file,error-pages@file
      - traefik.http.services.glances-{{ inventory_hostname }}.loadbalancer.server.port=61208

  # security
  docker-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: docker-proxy
    restart: always
    expose:
      - 2375
    environment:
      INFO: 1
      CONTAINERS: 1
      IMAGES: 1
      NETWORKS: 1
      VOLUMES: 1
      SERVICES: 1
      POST: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - docker
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: always
    network_mode: host
    environment:
      TZ: '{{ timezone }}'
      F2B_LOG_TARGET: STDOUT
      F2B_LOG_LEVEL: INFO
      F2B_DB_PURGE_AGE: 1d
      SSMTP_HOST: '{{ vault.smtp.host }}'
      SSMTP_PORT: '{{ vault.smtp.port }}'
      # SSMTP_HOSTNAME: example.com
      SSMTP_USER: '{{ vault.smtp.accounts.auth.email }}'
      SSMTP_PASSWORD: '{{ vault.smtp.accounts.auth.password }}'
      SSMTP_TLS: 'YES'
    volumes:
      - /var/log:/var/log:ro
      - '{{ paths.root }}/fail2ban:/data'
    cap_add:
      - NET_ADMIN
      - NET_RAW

  # services
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    restart: unless-stopped
    hostname: git.{{ domain }}
    environment:
      TZ: '{{ timezone }}'
    ports:
      - '2222:22'
    volumes:
      - '{{ paths.root }}/gitlab/config:/etc/gitlab'
      - '{{ paths.root }}/gitlab/data:/var/opt/gitlab'
      - '{{ paths.root }}/gitlab/backups:/var/opt/gitlab-backups'
      - '{{ paths.root }}/gitlab/logs:/var/log/gitlab'
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitlab.rule=Host(`git.{{ domain }}`)
      - traefik.http.routers.gitlab.entrypoints=https
      - traefik.http.routers.gitlab.service=gitlab-{{ inventory_hostname }}
      - traefik.http.routers.gitlab.tls=true
      - traefik.http.routers.gitlab.tls.certresolver=http
      - traefik.http.routers.gitlab.middlewares=security@file,error-pages@file
      - traefik.http.services.gitlab-{{ inventory_hostname }}.loadbalancer.server.port=80
      - traefik.http.routers.registry.rule=Host(`registry.{{ domain }}`)
      - traefik.http.routers.registry.entrypoints=https
      - traefik.http.routers.registry.service=registry-{{ inventory_hostname }}
      - traefik.http.routers.registry.tls=true
      - traefik.http.routers.registry.tls.certresolver=http
      - traefik.http.routers.registry.middlewares=security@file,error-pages@file
      - traefik.http.services.registry-{{ inventory_hostname }}.loadbalancer.server.port=80
  gitlab-runner:
    image: gitlab/gitlab-runner:alpine
    container_name: gitlab-runner
    restart: unless-stopped
    environment:
      DOCKER_HOST: tcp://docker-proxy:2375
    volumes:
      - '{{ paths.root }}/gitlab-runner:/etc/gitlab-runner'
    networks:
      - docker
  paperless:
    image: jonaswinkler/paperless-ng:latest
    container_name: paperless
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      TZ: '{{ timezone }}'
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_TIME_ZONE: '{{ timezone }}'
      PAPERLESS_SECRET_KEY: '{{ vault.paperless.secret_key }}'
      PAPERLESS_ENABLE_HTTP_REMOTE_USER: 'true'
      PAPERLESS_OCR_LANGUAGE: 'deu'
      PAPERLESS_IGNORE_DATES: '{{ vault.paperless.ignore_dates | join(",") }}'
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
      - '{{ paths.root }}/paperless/export:/usr/src/paperless/export'
      - '{{ paths.root }}/paperless/import:/usr/src/paperless/consume'
    networks:
      - proxy
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.paperless.rule=Host(`docs.{{ domain }}`)
      - traefik.http.routers.paperless.entrypoints=https
      - traefik.http.routers.paperless.tls=true
      - traefik.http.routers.paperless.tls.certresolver=http
      - traefik.http.routers.paperless.middlewares=auth@file,security@file,error-pages@file,paperless-cors
      - traefik.http.services.paperless-{{ inventory_hostname }}.loadbalancer.server.port=8000
      - traefik.http.middlewares.paperless-cors.headers.accesscontrolalloworiginlist=https://{{ domains.internal }}
networks:
  proxy:
    ipam:
      config:
        - subnet: 172.20.1.0/24
          gateway: 172.20.1.1
  docker:
    ipam:
      config:
        - subnet: 172.20.2.0/24
          gateway: 172.20.2.1
  redis:
    ipam:
      config:
        - subnet: 172.20.3.0/24
          gateway: 172.20.3.1
volumes:
  paperless_data:
  paperless_media:
