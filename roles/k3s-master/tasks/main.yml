# configure cluster
- name: Install binaries
  shell:
    cmd: '{{ item }}'
  changed_when: true
  loop:
    - curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=latest sh -s - --node-ip {{ master_ip }} --advertise-address {{ master_ip }} --disable traefik
    - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

# fetch node register token
- name: Fetch node-token
  become: true
  block:
    - name: Wait for node-token file
      wait_for:
        path: /var/lib/rancher/k3s/server/node-token
    - name: Read node-token file
      slurp:
        path: /var/lib/rancher/k3s/server/node-token
      register: node_token_file
    - name: Store node-token
      set_fact:
        node_token: "{{ node_token_file.content | b64decode | regex_replace('\n', '') }}"
        cacheable: yes

- name: Create aliases
  lineinfile:
    path: '{{ paths.home }}/.bashrc'
    line: 'alias {{ item.alias }}="{{ item.command }}"'
    regexp: 'alias {{ item.alias }}="{{ item.command }}"$'
    insertafter: ^alias
    create: yes
  loop:
    - { alias: 'kubectl', command: 'kubectl --kubeconfig {{ kubeconfig.local }}' }
    - { alias: 'k', command: 'kubectl --kubeconfig {{ kubeconfig.local }}' }
    - { alias: 'helm', command: 'helm --kubeconfig {{ kubeconfig.local }}' }
    - { alias: 'h', command: 'helm --kubeconfig {{ kubeconfig.local }}' }

# configure remote access
- name: Configure remote access
  become: true
  block:
    - name: Change ownership of local config file
      file:
        path: '{{ kubeconfig.local }}'
        owner: '{{ ansible_user }}'
    - name: Ensure directory exists
      file:
        path: '{{ kubeconfig.remote | dirname }}'
        state: directory
    - name: Duplicate config file for remote access
      copy:
        src: '{{ kubeconfig.local }}'
        dest: '{{ kubeconfig.remote }}'
        owner: '{{ ansible_user }}'
        mode: 0600
        remote_src: yes
    - name: Replace server in config file
      replace:
        path: '{{ kubeconfig.remote }}'
        regexp: '127\.0\.0\.1'
        replace: '{{ ansible_host }}'
    - name: Fetch config file for remote access
      fetch:
        src: '{{ kubeconfig.remote }}'
        dest: "{{ lookup('env', 'HOME') }}/.kube/infrastructure/config"
        flat: yes
